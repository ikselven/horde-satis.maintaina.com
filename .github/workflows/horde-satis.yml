---
name: Horde Satis Repo

on:
  # run the workflow everyday at 00:00 UTC
  schedule:
    - cron: '35 8 * * *'
  # in addition, run on every push to the master branch
  push:
    branches:
      - master
    # do not run the workflow when documentation was changed
    paths-ignore:
      - docs/*
      - README.md
      - LICENSE
  # the workflow can also be triggered manually
  workflow_dispatch:

jobs:
  # build the website and deploy it to gh-pages branch of a separate repository
  build:
    runs-on: ubuntu-latest

    steps:
      # clone the repository
      - uses: actions/checkout@v2

      # # Preparations for caching composer's cache directory
      # - name: Get Composer Cache Directory
      #   id: composer-cache
      #   run: |
      #     echo "::set-output name=dir::$(composer config cache-files-dir)"

      # # configure the Github Actions cache for composer's cache directory and
      # # retrieve it if available
      # - name: Cache Composer Downloads
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ steps.composer-cache.outputs.dir }}
      #     key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-composer-

      # # configure cache for PHP dependencies and retrieve it if available
      # - name: Cache PHP dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: vendor
      #     key: ${{ runner.os }}-build-${{ hashFiles('**/composer.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-

      # # install dependencies with composer
      # - name: Install PHP dependencies
      #   uses: php-actions/composer@v1

      # accelerate mirror generation by caching the composer directory
      - name: Cache composer directory
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: ~/.composer
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # generate the Satis Website
      - name: Generate Satis Website
        run: |
          mkdir build
          ln bin/satis.json build/satis.json
          composer config -g github-oauth.github.com "${{ secrets.GITHUB_TOKEN }}"
          docker pull composer/satis
          docker run --rm --init \
            -u $(id -u):$(id -g) \
            -v $(pwd)/build:/build \
            -v "${COMPOSER_HOME:-$HOME/.composer}:/composer" \
            composer/satis -vvv --no-ansi --no-interaction build -- /build/satis.json /build/output
          rm -rf "$HOME/.composer"

      # deploy the website to gh-pages branch of a separate repository
      - name: Deploy Satis Website
        uses: crazy-max/ghaction-github-pages@v2
        with:
          repo: ikselven/horde-satis
          target_branch: master
          build_dir: build/output/
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_PAT: ${{ secrets.SATIS_DEPLOY_PAT }}
